{"version":3,"sources":["component/MenuComponent.js","service/TodoService.js","component/AddTodoComponent.js","component/TodoComponent.js","component/TodoContainer.js","App.js","serviceWorker.js","index.js"],"names":["MenuComponent","react_default","a","createElement","className","href","react_router_dom","to","Component","TODO_URL","service_TodoService","axios","get","todo","post","id","delete","divStyle","marginBottom","AddTodoComponent","state","todoName","handleChange","event","_this","setState","target","value","handleSubmit","preventDefault","TodoService","executePostService","then","res","props","history","push","onSubmit","this","type","name","onChange","style","TodoComponent","todos","gotoBeanComponent","deleteTodo","executeDeleteService","response","data","_this2","executeGetService","_this3","Fragment","map","key","onClick","HelloWorldApp","component_MenuComponent","react_router","path","exact","component","App","TodoContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d6c4dc38.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\n\nclass MenuComponent extends Component {\n    \n    render() {\n        return (\n            <header>\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\n                    <div><a href=\"http://www.google.com\" className=\"navbar-brand\">Best Friend</a></div>\n                    <ul className=\"navbar-nav\">\n                        <li><Link className=\"nav-link\" to=\"/todo\">Todo</Link></li>\n                        <li><Link className=\"nav-link\" to=\"/add-todo\">Add Todo</Link></li>\n                    </ul>\n                </nav>\n            </header>\n        )\n\n    }\n\n}\n\nexport default MenuComponent","import axios from 'axios'\n\nconst TODO_URL = 'http://localhost:8080/todo';\n\nclass TodoService {\n\n    executeGetService() {\n        return axios.get(TODO_URL);\n    }\n\n    executePostService(todo) {\n        return axios.post(TODO_URL, todo);\n    }\n\n    executeDeleteService(id) {\n        return axios.delete(TODO_URL + \"/\" + id);\n    }\n\n}\n\nexport default new TodoService()","import React, { Component } from 'react';\nimport TodoService from '../service/TodoService';\n\nconst divStyle = {\n  marginBottom: '7px'\n};\n\nclass AddTodoComponent extends Component {\n    state = {\n    todoName: \"\"\n  }\n\n  handleChange = event => {\n    this.setState({ todoName: event.target.value });\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    TodoService.executePostService({\"todoName\": this.state.todoName})\n      .then(res => {\n        this.props.history.push('/todo')\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Add something I need to do</h1>\n        <form className=\"form-group\" onSubmit={this.handleSubmit}>\n          <label>\n            <input  className=\"form-control\" type=\"text\" name=\"todoName\" onChange={this.handleChange} />\n          </label>\n          <button style={divStyle}className=\"btn btn-success\" type=\"submit\">Add Todo</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default AddTodoComponent","import React, { Component } from 'react';\nimport TodoService from '../service/TodoService';\n\nclass TodoComponent extends Component {\n    state = {\n        todos : []\n      }\n\n    componentDidMount() {\n        \n        TodoService.executeGetService()\n                .then(response => {\n                    this.setState({\n                        todos: response.data\n                    })\n                })\n    }\n\n    render() {\n        return (<>\n            <h1>Todo Component</h1>\n            <div>\n               \n              <ul className = \"list-group\">\n                 {this.state.todos.map(todo => <li className = \"list-group-item\" key={todo.id}>Todo: {todo.todoName} <button className=\"btn btn-danger float-right\"onClick={() => {\n                     this.deleteTodo(todo.id)}}>x</button></li>)}\n              </ul>\n            </div>\n            <div className=\"float-right\">\n                <button className=\"btn btn-success \" onClick={this.gotoBeanComponent}>Add Todo</button>\n            </div>\n        </>\n        )\n    }\n\n    gotoBeanComponent = () => {\n        this.props.history.push('/add-todo')\n    }\n\n    deleteTodo = (id) => {    \n        TodoService.executeDeleteService(id)\n            .then(response => {\n                this.setState({\n                    todos: response.data\n                })\n            })\n    }\n}\n\nexport default TodoComponent","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport MenuComponent from './MenuComponent'\nimport AddTodoComponent from './AddTodoComponent';\nimport TodoComponent from './TodoComponent';\n\nclass HelloWorldApp extends Component {\n    render() {\n        return (\n            <>\n                <Router>\n                    <>\n                        <MenuComponent />\n                        <div className=\"container\">\n                            <Switch>\n                                <Route path=\"/\" exact component={TodoComponent} />\n                                <Route path=\"/todo\" component={TodoComponent} />\n                                <Route path=\"/add-todo\" component={AddTodoComponent} />\n                            </Switch>\n                        </div>\n                    </>\n                </Router>\n            </>\n        )\n    }\n}\n\nexport default HelloWorldApp;","import React, { Component } from 'react';\nimport './App.css';\nimport TodoContainer from './component/TodoContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}